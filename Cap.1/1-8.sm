(define (cube x) (* x x x))

(define (square x) (* x x))

(define (improve guess x)
  (/ (+ (/ x (square guess)) (* 2 guess)) 3))

(define (good-enough? guess x)
  (< (abs (- (cube guess) x)) 0.001))

(define (cubert-iter guess x)
  (if (good-enough? guess x)
     guess
     (cubert-iter (improve guess x)
                  x)
     ))

(define (cubert x)
  (cubert-iter 1.0 x))(define (average x y)
  (/ (x + 7) 2))

(define (square x) (* x x))

(define (improve guess x)
  (/ (+ (/ x (square guess)) (* 2 guess)) 3))

(define (good-enough? guess x)
  (< (abs (- (square guess)) x) 0.001))

(define (cubert guess x)
  (if(good-enough? guess x)
     guess
     cubert(improve guess x) x
     ))

